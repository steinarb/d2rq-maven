This file resembles the state of D2RQ Version 0.2

Possible improvements
=====================
reduce dependencies on jena where possible with wrapper classes/interfaces
and make compatible with sesame

Issues:
=================
Database returns Column types as Nodes at one point. This is the only reference to RDF. Remove it?
MapParser why is assertHasColumnTypes(nodeMaker) here? and getDatabase(NodeMaker resourceMaker)
TripleQuery TODO: The logic for removing unnecessary joins is ugly and probably 
BlankNodeIdentifier constructor: problem if there are columns: XId, X and Id?
some of the NodeMaker classes (esp. classes, that just give performance hints through couldFit()
could well be derived from a common superclass (reduces source code size).
parseClassMaps returns errors, when datastorage is not defined. What happens with definitions that relate to more than one database?
Column getColumnValues(String) returns a Map, that contains Column objects a keys. correct?

Ingnore (quoting Richard)
=========================
UriMatchPolicy, QueryContext

Language
========
Is this language simpler than writing clauses by hand? e.g.
m(S,P,O) :- pattern(S,["http://annotation.semanticweb.org/iswc/iswc.daml#@...",PT,...]), SELECT ?

ClassMap: defines how instances of the class are identified (from Node-Type to DB)
--------
Source: dataStorage containsDuplicates (->DISTINCT) translateWith condition
Columns: uriColumn, uriPattern, bNodeIdColumns % pattern: exclude pattern parts to be part of column values
Properties: class (inverse:classMap)  additionalProperty 
may one class be mapped to different databases? 
class is optional (see MapParser) and can be substituted with an ObjectPropertyBridge which gets the type from columns

PropertyBridge: for Literals, Data-URIs and Relations
---------------
DB: join condition translateWith  
Source: belongsToClassMap (must -> subject) refersToClassMap (must in a join -> object)
Properies: property (inverse: propertyBridge)
Data: column, pattern datatype lang
Speed: valueMaxLength valueContains valueRegex (does not work in (ANY ANY ANY))

Properties from Join  
--------------------
N:M example:
d2rq:join "Papers.PaperID = Rel_Person_Paper.PaperID" ;
d2rq:join "Rel_Person_Paper.PersonID = Persons.PerID" ;
d2rq:column "Persons.Name";

Other
-----
conditions, hint performances

Classes sorted by Frameworks
============================
Query: QueryCombiner TripleQuery SQLStatementMaker TripleResultSet
D2RQLanguage: D2RQ MapParser Database Join PropertyBridge TranslationTable
JenaInterface: GraphD2RQ ModelD2RQ D2RQCapabilities D2RQReslutIterator D2RQException
ValueSource implementations: Pattern, RegexRestriction, TranslatingValueSource (in TranslationTable private),
                             BlankNodeIdentifier, Column, ContainsRestriction, MaxLengthRestriction
NodeMaker implementations: UriMaker, BlankNodeMaker, FixedNodeMaker, LiteralMaker


Classes sorted by Purpose
=========================
Data Mapping: ModelD2RQ, GraphD2RQ, D2RQ*, PropertyBridge
Database: Database, Join, 
Parsing: MapParser
Query: QueryCombiner, QueryContext, TripleQuery
Utilities: Logger
Interfaces: ValueSource, Translator, NodeMaker
Translator implementations: TranslationTable  
ValueSource implementations: Pattern, RegexRestriction, TranslatingValueSource (TranslationTable private)
ValueSource impls: BlankNodeIdentifier, Column, ContainsRestriction, MaxLengthRestriction
NodeMaker implementations: UriMaker, BlankNodeMaker, FixedNodeMaker, LiteralMaker


Purpose
==========
BlankNodeIdentifier creates/decomposes anon ids with table names
BlankNodeMaker create a blank node for a given row
CSV parse comma-separated values
CSVParser makes pairs of CSV into a Map
Column as a Datasource, gets the specific value from a row
ContainsRestriction couldFit() performance hint valueContains on any value source
D2RQ defines D2RQ namespace and D2RQ constant nodes 
D2RQCapabilities see com.hp.hpl.jena.graph.Capabilities
D2RQException isa JenaException
D2RQResultIterator iterates over a list of tripleResultSets
Database holds interface information, column types and infers types
FixedNodeMaker produces a static node
GraphD2RQ top level object (Jena Graph), entry for QueryHandler, find()
Join represent a join between columns of two tables
LiteralMaker creates a literal for a given field
Logger for error messages
MapParser parse Mapping-Declarations given as RDF-Model
MaxLengthRestriction couldFit() performance hint
ModelD2RQ implements Jena Model
NodeMaker interface: couldFit, getColumnValues getColumns, getNode (compare to ValueSource)
Pattern matches @@ pattern with query string and returns database fields, given a row&mapping
PropertyBridge holds map info and implements couldFit()
QueryCombiner combine compatible queries, and see D2RQResultIterator and SQLStatementMaker
QueryContext Encapsulates state for the execution of a find query (trivial impl.)
RegexRestriction see Pattern, ValueSource
SQLStatementMaker creates full SQL query (no own logic, like TripleQuery)
TranslationTable List of Literal maps and implements getTranslatingValueSource (see ValueSource)
Translator Interface for bidirectional DB-Value to RDF-Value mapping: toRDFValue toDBValue
TripleQuery uses propertyBridge and SPO-Nodes to construct combined NodeMakers and Queries. (!)
TripleResultSet wraps java.sql.ResultSet, which handles database cursors, value types etc.
URIMatchPolicy (to be explained by Richard)
UriMaker make uri from id (given by value source)
ValueSource interface methods for DB-Values: couldFit getColumnValues, getColumns, getValue


All files without description, sorted alphabetically
=======================================================
BlankNodeIdentifier
BlankNodeMaker
CSV
CSVParser
Column
ContainsRestriction
D2RQ
D2RQCapabilities
D2RQException
D2RQResultIterator
Database
FixedNodeMaker
GraphD2RQ
Join
LiteralMaker
Logger
MapParser
MaxLengthRestriction
ModelD2RQ
NodeMaker
Pattern
PropertyBridge
QueryCombiner
QueryContext
RegexRestriction
SQLStatementMaker
TranslationTable
Translator
TripleQuery
TripleResultSet
URIMatchPolicy
UriMaker
ValueSource

