<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<?xml version="1.0" encoding="utf-8"?><HTML lang=en xml:lang="en" 
xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>D2RQ -  User Manual</TITLE>
<META http-equiv=Content-Type content="text/html; charset=utf-8">
<STYLE type=text/css>

BODY {
	PADDING-RIGHT: 1em; PADDING-LEFT: 70px; BACKGROUND: white fixed no-repeat left top; PADDING-BOTTOM: 2em; MARGIN: 0px; COLOR: black; PADDING-TOP: 2em; FONT-FAMILY: sans-serif; line-height: 1.8em;
}
:link {
	BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: #00c
}
:visited {
	BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: #609
}
A:active {
	BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: #c00
}
A:link IMG {
	BORDER-TOP-STYLE: none; BORDER-RIGHT-STYLE: none; BORDER-LEFT-STYLE: none; BORDER-BOTTOM-STYLE: none
}
A:visited IMG {
	BORDER-TOP-STYLE: none; BORDER-RIGHT-STYLE: none; BORDER-LEFT-STYLE: none; BORDER-BOTTOM-STYLE: none
}
A IMG {
	COLOR: white
}

@media All    
{
A IMG {
	
}
    }
TH {
	FONT-FAMILY: sans-serif
}
TD {
	FONT-FAMILY: sans-serif
}
H1 {
	TEXT-ALIGN: left
}
H2 {
	TEXT-ALIGN: left
}
H3 {
	TEXT-ALIGN: left
}
H4 {
	TEXT-ALIGN: left
}
H5 {
	TEXT-ALIGN: left
}
H6 {
	TEXT-ALIGN: left
}
H1 {
	BACKGROUND: white; COLOR: #005a9c
}
H2 {
	BACKGROUND: white; COLOR: #005a9c
}
H3 {
	BACKGROUND: white; COLOR: #005a9c
}
H1 {
	FONT: 170% sans-serif
}
H2 {
	FONT: 140% sans-serif
}
H3 {
	FONT: 120% sans-serif
}
H4 {
	FONT: bold 100% sans-serif
}
H5 {
	FONT: italic 100% sans-serif
}
H6 {
	FONT: small-caps 100% sans-serif
}
.hide {
	DISPLAY: none
}
DIV.head {
	MARGIN-BOTTOM: 1em
}
DIV.head H1 {
	CLEAR: both; MARGIN-TOP: 2em
}
DIV.head TABLE {
	MARGIN-TOP: 2em; MARGIN-LEFT: 2em
}
P.copyright {
	FONT-SIZE: small
}
P.copyright SMALL {
	FONT-SIZE: small
}

@media Screen    
{
UNKNOWN {
	BACKGROUND: #ffa
}
    }
PRE {
	MARGIN-LEFT: 2em; line-height: 1.2em;
}
DT {
	MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px
}
DD {
	MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px
}
DT {
	FONT-WEIGHT: bold
}
PRE {
	FONT-FAMILY: monospace
}
CODE {
	FONT-FAMILY: monospace
}
UL.toc {
	LIST-STYLE-TYPE: none
}

@media Aural    
{
H1 {
	stress: 20; richness: 90
}
H2 {
	stress: 20; richness: 90
}
H3 {
	stress: 20; richness: 90
}
.hide {
	speak: none
}
P.copyright {
	volume: x-soft; speech-rate: x-fast
}
DT {
	pause-before: 20%
}
PRE {
	speak-punctuation: code
}
}

DIV.exampleInner PRE {
	MARGIN-TOP: 0em; MARGIN-BOTTOM: 0em; MARGIN-LEFT: 0em; FONT-FAMILY: monospace
}
DIV.exampleOuter {
	BORDER-RIGHT: gray 4px double; PADDING-RIGHT: 0em; BORDER-TOP: gray 4px double; PADDING-LEFT: 0em; PADDING-BOTTOM: 0em; MARGIN: 0em; BORDER-LEFT: gray 4px double; PADDING-TOP: 0em; BORDER-BOTTOM: gray 4px double
}
DIV.exampleInner {
	PADDING-RIGHT: 4px; PADDING-LEFT: 4px; PADDING-BOTTOM: 4px; MARGIN: 0em; COLOR: black; BORDER-TOP-STYLE: double; BORDER-TOP-COLOR: #d3d3d3; PADDING-TOP: 4px; BORDER-BOTTOM: #d3d3d3 4px double; BACKGROUND-COLOR: #efeff8
}
DIV.trigOuter {
	PADDING-RIGHT: 0em; PADDING-LEFT: 0em; PADDING-BOTTOM: 0em; MARGIN: 0em; PADDING-TOP: 0em
}
DIV.trigInner {
	PADDING-RIGHT: 0.5em; PADDING-LEFT: 0.5em; PADDING-BOTTOM: 0.5em; MARGIN: 0em; COLOR: black; PADDING-TOP: 0.5em; BACKGROUND-COLOR: #ffec8b
}
DIV.trigInner P {
	MARGIN-TOP: 0em; MARGIN-BOTTOM: 0em; MARGIN-LEFT: 0em
}
P.footer {
	TEXT-ALIGN: right
}
</STYLE>
</HEAD>
<BODY>
<DIV class=head> 
  <H1 id=title>D2RQ - Treating Non-RDF Relational Databases as Virtual RDF Graphs</H1>
  <H2 id=doctype>User Manual and Language Specification</H2>
<DL>
  <DT>This Version: 
    <DD><A 
  href="http://www.wiwiss.fu-berlin.de/suhl/bizer/d2rq/spec/20040804/">http://www.wiwiss.fu-berlin.de/suhl/bizer/d2rq/spec/20040804/</A> 
    <DT>Latest Version: 
    <DD><A 
  href="http://www.wiwiss.fu-berlin.de/suhl/bizer/d2rq/spec/">http://www.wiwiss.fu-berlin.de/suhl/bizer/d2rq/spec/</A>
<DT> 
  <DT>Authors: 
    <DD><a href="http://www.wiwiss.fu-berlin.de/suhl/ueber_uns/team/chris_bizer.htm" target="_blank">Chris 
      Bizer</a> (Freie Universit&auml;t Berlin, Germany) 
    <DD>  
    <DD><a href="http://richard.cyganiak.de/">Richard Cyganiak</a> (Freie Universit&auml;t Berlin, Germany) 
    <DD>  
  <DT>  
</DL>
<P>&nbsp;</P>
<HR title="Separator for header">
</DIV>
<H2><A id=abstract name=abstract></A>Abstract</H2>
<P>This document describes D2RQ, a declarative mapping language for treating non-RDF 
  relational databases as virtual RDF graphs within the Jena Semantic Web development 
  toolkit.</P>
<DIV class=status>
  <P>    <!-- End Status-Of-This-Document Text -->
</P>
</DIV>
<H2 class=notoc><A id=toc name=toc>Table of Contents</A></H2>
<DIV class=contents> 
  <UL class=toc>
    <LI class=tocline>1. <A 
  href="#introduction">Introduction</A> 
    <LI class=tocline>2. <A 
    href="#architecture">Architecture</A> 
    <LI>3. <a href="#specification">Language Specification</a> 
    <LI>&nbsp;&nbsp;&nbsp;&nbsp;3.1. <a href="#database">d2rq:Database</a> 
    <LI>&nbsp;&nbsp;&nbsp;&nbsp;3.2. <a href="#classmap">d2rq:ClassMap</a> 
    <LI>&nbsp;&nbsp;&nbsp;&nbsp;3.3. <a href="#propertybridge">d2rq:PropertyBridge</a> 
    <LI>&nbsp;&nbsp;&nbsp;&nbsp;3.4. <a href="#additionalproperty">d2rq:AdditionalProperty</a> 
    <LI>&nbsp;&nbsp;&nbsp;&nbsp;3.5. <a href="#translationtable">d2rq:TranslationTable</a> 
    <LI>&nbsp;&nbsp;&nbsp;&nbsp;3.6 <a href="#conditional">Conditional Mappings</a>
    <LI>&nbsp;&nbsp;&nbsp;&nbsp;3.7 <a href="#hint">Performance Optimization using 
      Hint Properties</a>
    <LI>4. <a href="#usingD2RQ">Using D2RQ within Jena</a> 
    <LI>&nbsp;&nbsp;&nbsp;&nbsp;4.1. <a href="#usingmodel">Using D2RQ with the 
      Jena model API</a> 
    <LI>&nbsp;&nbsp;&nbsp;&nbsp;4.2. <a href="#usingfind">Using find(spo) and 
      D2RQ</a> 
    <LI>&nbsp;&nbsp;&nbsp;&nbsp;4.3. <a href="#usingrdql">Using RDQL and D2RQ</a> 
    <LI class=tocline>5. <A 
  href="#references">References</A> 
    <LI class=tocline>6. <A 
  href="#change_log">Change Log</A> </LI>
  </UL>
</DIV>
<HR>

<H1><A id=introduction name=introduction>1. Introduction</A></H1>
<P>This document describes D2RQ, a declarative mapping language for treating non-RDF, 
  relational databases as virtual, read-only RDF graphs within the Jena toolkit 
  [<a href="#jena">Jena</a>]. </P>
<p>Using D2RQ you can:</p>
<ul>
  <li>access information in a non-RDF database using the Jena model API.</li>
  <li>query a non-RDF database using RDQL [<a href="#rdql">RDQL</a>] or find(spo).</li>
  <li>do RDFS and OWL inferencing over the content of a non-RDF database using 
    the Jena ontology API.</li>
  <li>publish the content of a non-RDF database on the Semantic Web using the 
    Joseki RDF server [<a href="#joseki">Joseki</a>].</li>
</ul>
<p>The goal of D2RQ is to expose the content of huge, live, non-RDF databases 
  to the Semantic Web without having to replicate the database into RDF.</p>
<p>D2RQ is implemented as a Jena graph, the basic information representation object 
  within the Jena framework. A D2RQ graph wraps one or more local relational databases 
  into a virtual, read-only RDF graph. It rewrites Jena API calls, find() and 
  RDQL queries to application-data-model specific SQL queries. The result sets 
  of these SQL queries are transformed into RDF triples which are passed up to 
  the higher layers of the Jena framework.</p>
<p>For using D2RQ within your applications, you just have to include the d2rq.jar 
  file into your class path and write a D2RQ mapping between the ontology used 
  by your application and your local database.</p>
<p>&nbsp;</p>
<HR title="Separator for header">
<h1><A id=architecture name=architecture>2. Architecture</A></h1>
<p>D2RQ consists of:</p>
<ul>
  <li>the <strong>D2RQ Mapping Language</strong>, a declarative mapping language 
    for describing the relation between an ontology and an relational data model. 
  </li>
  <li><strong>GraphD2RQ</strong>, a plug-in for the Jena Semantic Web toolkit, 
    which uses the mappings to rewrite Jena API calls to SQL queries and passes 
    query results as RDF triples up to the higher layers of the Jena framework.</li>
</ul>
<p><img src="architecture.gif" width="450" height="207"></p>
<p><strong>D2RQ Example</strong></p>
<p>We are using an example database which stores information about conferences, 
  papers, authors and topics through this manual. The database is mapped to the 
  International Semantic Web Community (ISWC) Ontology.</p>
<ul>
  <li>ISWC D2RQ mapping file: <a href="ISWC-d2rq.n3">ISWC-d2rq.n3</a></li>
  <li>ISWC ontology: <a href="iswc.daml.xml">iswc.daml.xml</a></li>
  <li>Example database (with some entries from the ISWC 2002 conference): <a href="ISWC.mdb">ISWC.mdb</a> 
    (MS Access DB) </li>
</ul>
<p>The examples below show:</p>
<ul>
  <li> how D2RQ translates different find(spo) patterns into SQL queries: <a href="D2RQ_Find_Examples.txt">D2RQ_Find_Examples.txt</a></li>
  <li> how D2RQ translates different RDQL queries into a series of SQL queries: 
    <a href="D2RQ_RDQL_Examples.txt">D2RQ_RDQL_Examples.txt</a> </li>
</ul>

<p>&nbsp;</p>
<HR title="Separator for header">
<H1><A id=ntrip_grammar name=specification>3.</A> Language Specification</H1>
<P>D2RQ is a declarative mapping language for describing the relation between 
  relational database schemata and OWL/RDFS ontologies. A D2RQ map is an RDF document. 
</P>
<P>The language is formally defined by the <a href="d2rq-rdfs.n3">D2RQ RDF-S Schema</a>. 
  <br>
  The D2RQ namespace is http://www.wiwiss.fu-berlin.de/suhl/bizer/D2RQ/0.1#</P>
<P>An ontology is mapped to a database schema using d2rq:ClassMaps, d2rq:DatatypePropertyBridges 
  and d2rq:ObjectPropertyBridges. The central object within D2RQ and also the 
  object to start with when writing a new D2RQ map is the ClassMap. A ClassMap 
  represents a class or a group of similar classes of the ontology. A ClassMap 
  specifies how instances of the class are identified. It has a set of PropertyBridges, 
  which specify how the properties of an instance are created. D2RQ maps have 
  the following general structure:</P>
<P><img src="StructureGross.gif">&nbsp;</P>
<P>The D2RQ map below relates the table conferences in a database to the class 
  conference in an ontology. You can use it as a template for writing your own 
  maps.</P>
<DIV class="trigOuter trigInner"> 
  <pre># D2RQ Namespace  
@prefix d2rq:        &lt;http://www.wiwiss.fu-berlin.de/suhl/bizer/D2RQ/0.1#&gt; .

# Namespace of the ontology
@prefix : &lt;http://annotation.semanticweb.org/iswc/iswc.daml#&gt; .

# Namespace of the database
@prefix db1: &lt;http://www.example.org/dbserver01/db01#&gt; .

# Other namespaces
@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
@prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; . 

# -----------------------------------------------
# Database

db1:Database1 rdf:type d2rq:Database;
              d2rq:odbcDSN &quot;IswcDB&quot;;
              d2rq:numericColumn &quot;Conferences.ConfID&quot;;
              d2rq:textColumn &quot;Conferences.Name&quot;;
              d2rq:textColumn &quot;Conferences.Location&quot; .

# -----------------------------------------------
# Conference table / class
#
# CREATE TABLE Conferences (
# ConfID int(11) default NULL,
# Name text,
# Location text
#) TYPE=MyISAM;

db1:Conference rdf:type d2rq:ClassMap ;
            d2rq:class :Conference ;
            d2rq:uriPattern &quot;http://conferences.org/comp/confno@@Conferences.ConfID@@&quot; ;
            d2rq:dataStorage db1:Database1 .

db1:eventTitle rdf:type d2rq:DatatypePropertyBridge ;
            d2rq:property :eventTitle ;
            d2rq:column &quot;Conferences.Name&quot; ;
            d2rq:belongsToClassMap db1:Conference ;
            d2rq:datatype xsd:string .

db1:location rdf:type d2rq:DatatypePropertyBridge ;
            d2rq:property :location ;
            d2rq:column &quot;Conferences.Location&quot; ; 
            d2rq:belongsToClassMap db1:Conference ;
            d2rq:datatype xsd:string . 
</pre>
  </DIV>
<P>The D2RQ language constructs are described in detail below:</P>
<P>&nbsp;</P>
<h2><a name="database"></a>3.1 Database</h2>
<P>A <strong>d2rq:Database</strong> defines an ODBC or JDBC connection to a local relational database 
  and specifies the type of the database columns used by D2RQ. A D2RQ map can 
  contain several d2rq:Databases for accessing different local databases.</P>
<P><strong>Properties</strong></P>
<table width="100%" border="1" cellpadding="5" cellspacing="0" bordercolor="#CCCCCC">
  <tr> 
    <td width="20%"><strong>d2rq:odbcDSN</strong></td>
    <td width="80%">The ODBC data source name of the database.</td>
  </tr>
  <tr> 
    <td><strong>d2rq:jdbcDriver</strong></td>
    <td>The JDBC driver for the database. Used together with d2rq:jdbcDSN.</td>
  </tr>
  <tr> 
    <td><strong>d2rq:jdbcDSN</strong></td>
    <td>The JDBC data source name of the database.</td>
  </tr>
  <tr> 
    <td><strong>d2rq:username </strong></td>
    <td>A username if required by the database.</td>
  </tr>
  <tr> 
    <td><strong>d2rq:password </strong></td>
    <td>A password if required by the database.</td>
  </tr>
  <tr> 
    <td><strong>d2rq:textColumn </strong></td>
    <td>Specifies that a database column contains text values. D2RQ will use ' 
      quotes around values from this column in SQL statements.</td>
  </tr>
  <tr> 
    <td><strong>d2rq:numericColumn</strong></td>
    <td>Specifies that a database column contains numeric values. D2RQ will not 
      quote values from this column in SQL statements.</td>
  </tr>
  <tr> 
    <td><strong>d2rq:dateColumn </strong></td>
    <td>Specifies that a database column contains dates. D2RQ will use # quotes 
      around values from this column in SQL statements.</td>
  </tr>
</table>
<P>d2rq:numericColumn, d2rq:textColumn, d2rq:dateColumn define the quoting style 
  used within SQL WHERE clauses. You must define the column type for all columns 
  that are used in d2rq:column, d2rq:pattern, d2rq:uriColumn, d2rq:uriPattern
  and d2rq:bNodeIdColumns statements. You don't have to define the type for
  columns that are only used in d2rq:join or d2rq:condition statements.</P>
<P><strong>Example</strong></P>
<DIV class="trigOuter trigInner"> 
  <pre>db1:Database1 rdf:type d2rq:Database;
              d2rq:odbcDSN &quot;IswcDB&quot;;
              d2rq:username=&quot;joseki&quot;;
              d2rq:password=&quot;*****&quot;;
              d2rq:numericColumn &quot;Conferences.ConfID&quot;;
              d2rq:textColumn &quot;Conferences.URI&quot;;
              d2rq:textColumn &quot;Conferences.Name&quot;;
              d2rq:textColumn &quot;Conferences.Location&quot;;
              d2rq:dateColumn &quot;Conferences.Date&quot;.</pre>
</DIV>
<P>A note on using multiple databases within a single D2RQ map: You cannot link from
one database by having a property bridge with d2rq:belongsToClassMap in one database
and d2rq:refersToClassMap in the other. Instead, define class maps in both databases
that create the same URIs or blank node IDs.</P>
<P>&nbsp;</P>

<h2><a name="classmap"></a>3.2 ClassMap</h2>
<P>A <strong>d2rq:ClassMap</strong> represents a class or a group of similar classes of an OWL 
  ontology or RDFS schema. A class map defines how instances of the class are 
  identified. Instances can be identified using URIrefs or blank nodes. URIrefs 
  can be created with d2rq:uriColumn and d2rq:uriPattern. Blank nodes are created 
  with d2rq:bNodeIdColumns. A ClassMap has a set of d2rq:PropertyBridges and is 
  connected to a d2rq:Database which represents the database where instance data 
  is stored.</P>
<p>Every ClassMap is based on one or several database columns&#8212;those
  in uriColumn, uriPattern or bNodeIdColumns. If these columns might contain
  multiple identical rows (that is, your database schema is not fully
  normalized), then you must add a d2rq:containsDuplicates statement to
  the ClassMap, or some queries will give unexpected results.</p>

<P><strong>Properties</strong></P>
<table width="100%" border="1" cellpadding="5" cellspacing="0" bordercolor="#CCCCCC">
  <tr> 
    <td valign="top"><strong>d2rq:class</strong></td>
    <td valign="top">An RDF-S or OWL class. All resources generated by this
        ClassMap are instances of this class.</td>
  </tr>
  <tr> 
    <td width="20%" valign="top"><strong>d2rq:uriPattern</strong></td>
    <td width="80%" valign="top"><p>Pattern used for URIref construction and reversing. 
        A Pattern is a string containing database column names separated by the 
        rest of the pattern by @@ deliminators. Column names are replaced by values 
        from the database in the mapping process. A uriPattern has to contain 
        the primary key column or columns for identifying a class instance. Database 
        column names have to be given in the form &quot;TableName.ColumnName&quot;. 
        If a pattern contains more than one column, then a separating string, 
        which must not occur in the column values, has to be used to separate the 
        column names, in order to allow D2RQ reversing given URIrefs into column 
        values.</p>
      <p>Example pattern:<br>
        <tt>&quot;http://example.org/lineItems/item@@Orders.orderID@@-@@LineItems.itemID@@&quot;</tt></p>
      </td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:uriColumn</strong></td>
    <td valign="top">Database column containing URIrefs for identifying instances. 
      The database column name have to be given in the form &quot;TableName.ColumnName&quot;.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:bNodeIdColumns</strong></td>
    <td valign="top">bNodeIdColumns is used if instances are identified using 
      bNodes. The bNodeIdColumns property specifies a column name or a list of 
      columns separated by commas, which contain the primary key information for 
      identifying instances. The primary key values are used together with the 
      ClassMap name to generate bNode labels. Database column names have to be 
      given in the form &quot;TableName.ColumnName&quot;.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:translateWith</strong></td>
    <td valign="top">Assigns a <a href="#translationtable">d2rq:TranslationTable</a> 
      to the class map. Values from the d2rq:uriColumn or d2rq:uriPattern will 
      be translated by the table before a resource is generated.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:dataStorage</strong></td>
    <td valign="top">Reference to a d2rq:Database where the instance data is stored.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:containsDuplicates</strong></td>
    <td valign="top">Must be specified on class maps whose columns (d2rq:uriColumn,
      columns used in d2rq:uriPattern, d2rq:bNodeIdColumns) might contain duplicate rows.
      In other words, if SELECT DISTINCT on those columns returns a different number
      of rows from SELECT, or if the database schema is not fully normalized. The
      only allowed value of the property is "true". Adding this property to class
      maps which do <em>not</em> contain duplicate values degrades performance, but
      results should still be correct.</td>
  </tr>
  <tr>
    <td valign="top"><strong>d2rq:additionalProperty</strong></td>
    <td valign="top">Adds an <a href="#additionalproperty">AdditionalProperty</a>
      to all instances of this class. 
      This might be useful for adding rdf:seeAlso properties or other fixed
      statements to all instances of the class. </td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:condition</strong></td>
    <td valign="top">Specifies an SQL WHERE condition. An instance of this class 
      will only be generated for database rows that satisfy the condition. Conditions 
      can be used to hide parts of the database from D2RQ, e.g. deny access to 
      data which is older or newer than a certain date. See section <a href="#condtional">Conditional 
      Mappings</a> for details.</td>
  </tr>
</table>
<P><strong>ClassMap property:</strong></P>
<table width="100%" border="1" cellpadding="5" cellspacing="0" bordercolor="#CCCCCC">
  <tr> 
    <td valign="top"><strong>d2rq:classMap</strong></td>
    <td>Inverse of d2rq:class and unnecessary if d2rq:class is used. Specifies 
      that a d2rq:classMap is used to create instances of an OWL or RDF-S class.</td>
  </tr>
</table>
<P>&nbsp;</P>
<P><strong>Example: ClassMap where instances are identified using an URI pattern</strong></P>
<DIV class="trigOuter trigInner"> 
  <pre>:InProceedings rdf:type rdfs:Class ;
     rdfs:comment &quot;The class Inproceedings (Papers) in the RDF-S schema.&quot; .

db1:InProceedingsClassMap rdf:type d2rq:ClassMap ;
    d2rq:uriPattern &quot;http://www.conference.org/conf02004/paper#Paper@@Papers.PaperID@@&quot; ;
    d2rq:class :InProceedings ;
    d2rq:dataStorage db1:Database1 .</pre>
</DIV>
<DIV class="trigOuter trigInner"> </DIV>
<P>The d2rq:class property is used to state that all resources generated by the
  d2rq:ClassMap are instances of an RDFS or OWL class. D2RQ automatically 
  adds a correspondig rdf:type AdditionalProperty to the ClassMap.</P>
<P>&nbsp;</P>
<P><strong>Example: ClassMap where instances are identified using blank nodes</strong></P>
<DIV class="trigOuter trigInner"> 
  <pre>db1:Topic rdf:type d2rq:ClassMap ;
    d2rq:bNodeIdColumns &quot;Topics.TopicID&quot; ;
    d2rq:class :Topic ;
    d2rq:dataStorage db1:Database1 .</pre>
</DIV>
  
<p>In order to recognize bNodes across several find() calls and to be able to 
  map bNodes to instance data in the database, D2RQ encodes the classMap name 
  together with the primary key values in the bNode label. The map above could 
  produce the bNode label &quot;http://www.example.org/dbserver01/db01#Topic@@6&quot;, 
  where the number &quot;6&quot; is a primary key value and &quot;http://www.example.org/dbserver01/db01#Topic&quot; 
  is the ClassMap name.</p>
<p>&nbsp;</p>
  <P><strong><a name="sameProperties"></a>Example: ClassMap for a group of classes 
  with the same properties</strong></P>
<P>If you want to use one ClassMap for a group of classes with the same properties 
  (like Person, Professor, Researcher, Student) that all come from the same table,
  you must create the rdf:type statements with an object property bridge instead of
  using d2rq:class.</P>
<DIV class="trigOuter trigInner"> 
  <pre>db1:PersonsClassMap rdf:type d2rq:ClassMap ;
       d2rq:uriColumn &quot;Persons.URI&quot; ;
       d2rq:dataStorage db1:Database1 .

db1:PersonsType rdf:type d2rq:ObjectPropertyBridge ;
      d2rq:property rdf:type ;
      d2rq:pattern &quot;http://annotation.semanticweb.org/iswc/iswc.daml#@@Persons.Type@@&quot; ; 
      d2rq:belongsToClassMap db1:PersonsClassMap .</pre>
  </DIV>
<P>Here, the class of each person is obtained by prefixing the values of the Persons.Type 
  column with an ontology namespace. If the class names were not the same as the 
  values of the Type column (say, numeric type codes), then a <a href="#translationtable">TranslationTable</a> 
  could be used.</P>
<P>&nbsp;</P>
  
<h2><a name="propertybridge"></a>3.3 Property Bridges</h2>
<P>Property Bridges relate database table columns to RDF properties. They are 
  used to construct URIs, blank nodes and literals from database values and to 
  reverse given RDF constructs back to database values. There are two types of 
  property bridges:</P>
<ul>
  <li>Datatype Property Bridges, which are used to construct literals from database 
    values and</li>
  <li>Object Property Bridges, which are used to construct URIs from database 
    values and to refer to instances of other class maps.</li>
</ul>

<p><strong>Common properties</strong></p>

<table width="100%" border="1" cellpadding="5" cellspacing="0" bordercolor="#CCCCCC">
  <tr>
    <td valign="top"><strong>d2rq:belongsToClassMap</strong></td>
    <td valign="top">Specifies that the property bridge belongs to a d2rq:ClassMap. 
      Must be specified for every property bridge.</td>
  </tr>
  <tr>
    <td width="20%" valign="top"><strong>d2rq:property</strong></td>
    <td width="80%" valign="top">The RDF property that connects the ClassMap
      with the object or literal created by the bridge. Must be specified for
      every property bridge.</td>
  </tr>
  <tr>
    <td valign="top"><strong>d2rq:join</strong></td>
    <td valign="top">If the columns used to create the literal value or object
      are not from the database table(s) that contains the ClassMap's columns,
      then the tables have to be joined together using one or more d2rq:join
      properties.
      See <a href="#exjoin">example</a> below.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:condition</strong></td>
    <td valign="top">Specifies an SQL WHERE condition. The bridge will only generate 
      a statement if the condition holds. A common usage is to suppress triples 
      with empty literal values: <tt>d2rq:condition &quot;Table.Column <> ''&quot;</tt>. 
      See section <a href="#condtional">Conditional Mappings</a> for details. 
      </td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:translateWith</strong></td>
    <td valign="top">Assigns a <a href="#translationtable">d2rq:TranslationTable</a>
      to the property bridge. Values from the d2rq:column or d2rq:pattern 
      will be translated by the table.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:valueMaxLength</strong></td>
    <td valign="top">Asserts that all values of this bridge
      are not longer than a number of characters. This allows
      D2RQ to speed up queries.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:valueContains</strong></td>
    <td valign="top">Asserts that all values of this bridge
      always contain a given string. This allows D2RQ to
      speed up queries. Most useful in conjunction with
       d2rq:column.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:valueRegex</strong></td>
    <td valign="top">Asserts that all values of this bridge
      match a given <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/regex/Pattern.html">regular expression</a>.
      This allows D2RQ to speed up queries. Most useful in conjunction
      with d2rq:column on columns whose values
      are very different from other columns in the database.</td>
  </tr>
</table>

<P><strong>PropertyBridge property:</strong></P>
<table width="100%" border="1" cellpadding="5" cellspacing="0" bordercolor="#CCCCCC">
  <tr> 
    <td valign="top"><strong>d2rq:propertyBridge</strong></td>
    <td> Inverse of d2rq:property and not needed if d2rq:property is used. The 
      d2rq:propertyBridge property specifies which property bridge is used for 
      an RDF property. If the same RDF property is used by several RDF classes, 
      then several property bridges are used to relate the RDF property to the 
      different class maps.</td>
  </tr>
</table>
<h3>&nbsp;</h3>
<P><strong>Example</strong></P>
<DIV class="trigOuter trigInner"> 
  <pre>:title rdf:type rdf:Property .

db1:inProceedingsTitle rdf:type d2rq:DatatypePropertyBridge;
       d2rq:belongsToClassMap db1:InProceedings ;
       d2rq:property :title ;
       d2rq:column &quot;Papers.Title&quot; .</pre>
</DIV>
<p>This generates RDF triples whose subjects come from the db1:InProceedings
  ClassMap, the predicate is :title, and the objects are taken from the
  Papers.Title column.</p>

<P>&nbsp;</P>

<h3>3.3.1 DatatypePropertyBridge</h3>
<P>Datatype property bridges are used to construct literal property values from 
  database values.</P>
<P><strong>Properties</strong></P>
<table width="100%" border="1" cellpadding="5" cellspacing="0" bordercolor="#CCCCCC">
  <tr>
    <td width="20%" valign="top"><strong>d2rq:column</strong></td>
    <td width="80%" valign="top">Database column that contains the literal value. 
      Column names have to be given in the form &quot;TableName.ColumnName&quot;. 
    </td>
  </tr>
  <tr>
    <td valign="top"><strong>d2rq:pattern</strong></td>
    <td valign="top">Pattern to create the property value. Patterns can be used 
      to extend column values before they are used as property values. Patterns 
      can also be used to merge several column values to one property value. If 
      a pattern contains more than one column, then a separating string, which 
      cannot occur in the column values, has to be used between the column names, 
      in order to allow D2RQ reversing given literals into column values.</td>
  </tr>
  <tr>
    <td valign="top"><strong>d2rq:datatype</strong></td>
    <td valign="top">Specifies the datatype of the literal.</td>
  </tr>
  <tr>
    <td valign="top"><strong>d2rq:lang</strong></td>
    <td valign="top">Specifies the language of the literal.</td>
  </tr>
</table>

<P>&nbsp;</P>
<P><strong>Example: Datatype property bridge using a column from the same table 
  as the class map </strong></P>
<DIV class="trigOuter trigInner">
  <pre>:abstract   rdf:type rdf:Property .

db1:inProceedingsAbstract rdf:type d2rq:DatatypePropertyBridge ;
            d2rq:belongsToClassMap db1:InProceedings ;
            d2rq:property :abstract ;
            d2rq:column &quot;Papers.Abstract&quot; ; 
            d2rq:lang &quot;en&quot; .</pre>
</DIV>
<P>The values of the column &quot;Papers.Abstract&quot; is used to create the 
  property abstract. The language is set to English and the property bridge belongs 
  to the class map db1:InProceedings. </P>
<P><strong><a name="exjoin"></a>Example: Datatype property bridge using information 
  from different database tables </strong></P>
<DIV class="trigOuter trigInner">
  <pre>:authorName rdf:type rdf:Property .

db1:authorNameBridge rdf:type d2rq:DatatypePropertyBridge ;
            d2rq:belongsToClassMap db1:Papers ;</pre>
            d2rq:property :authorName ;
            d2rq:column &quot;Persons.Name&quot;;
            d2rq:join &quot;Papers.PaperID = Rel_Person_Paper.PaperID&quot; ;
            d2rq:join &quot;Rel_Person_Paper.PersonID = Persons.PerID&quot; ;
            d2rq:datatype xsd:string .
</DIV>
<p>This property bridge adds the names of authors to papers. 
  If a paper has several authors, then several authorName properties are added. 
  Because of the n:m relation between InProceedings and Persons, the d2rq:join 
  clauses join the tables Papers and Persons over the table Rel_Person_Paper. 
</p>
<p>&nbsp; </p>

<h3>3.3.2 ObjectPropertyBridge</h3>
<P>Object property bridges are used to construct URIs and to refer to instances 
  of other class maps.</P>
<P><strong>Properties</strong></P>
<table width="100%" border="1" cellpadding="5" cellspacing="0" bordercolor="#CCCCCC">
  <tr> 
    <td width="20%" valign="top"><strong>d2rq:column </strong></td>
    <td width="80%" valign="top">Database column that contains URIs. Column names 
      have to be given in the form &quot;TableName.ColumnName&quot;. </td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:pattern</strong></td>
    <td valign="top">Pattern to create the property value. If a pattern that contains 
      more than one column, then a separating string, which cannot occur in the 
      column values, has to be used between the column names, in order to allow 
      D2RQ reversing given URIs into column values.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:refersToClassMap</strong></td>
    <td valign="top">Reference to a d2rq:ClassMap. d2rq:refersToClassMap has to 
      be used together with d2rq:join when a property refers to instances created 
      by other classMaps. D2RQ uses the uriPattern, uriColumn or bNodeIdColumn 
      properties of the referred class map to construct the property value. See 
      <a href="#exjoin2">example</a> below.</td>
  </tr>
</table>
<P><strong>Example: Object property bridge using a column from the same table 
  as the class map </strong></P>
<DIV class="trigOuter trigInner">
  <pre>:eMail rdf:type rdf:Property ,
            
db1:PersonsClassEmail rdf:type d2rq:ObjectPropertyBridge ;
            d2rq:belongsToClassMap db1:PersonsClassMap ;
            d2rq:property :email ;
            d2rq:pattern &quot;mailto:@@Persons.Email@@&quot; .</pre>
</DIV>
<P>The pattern &quot;mailto:@@Persons.Email@@&quot; is used together with the 
  values of the column &quot;Persons.Email&quot; to create email property values. 
  The property bridge belongs to the class map db1:PersonsClassMap. </P>
<P><strong><a name="exjoin2"></a>Example: Object property bridge using information 
  from two database tables </strong></P>
<DIV class="trigOuter trigInner">
  <pre>:conference rdf:type rdf:Property .

db1:conferenceBridge rdf:type d2rq:ObjectPropertyBridge ;
            d2rq:belongsToClassMap db1:Papers ;
            d2rq:property :conference ;
            d2rq:refersToClassMap db1:Conference ;
            d2rq:join &quot;Papers.Conference = Conferences.ConfID&quot; .</pre>
</DIV>
<p>There is a 1:n relation between conferences and papers, which is expressed 
  by the d2rq:join property. The :conference property refers to instances of the 
  class map db1:Conference. D2RQ uses the uriPattern of this class map to construct 
  the property values.</DIV> 
<p>&nbsp;</p>
<h2><a name="additionalproperty"></a>3.4 AdditionalProperty</h2>
<p>A <strong>d2rq:AdditionalProperty</strong> can be used to add a fixed statement 
  to all instances generated by one class map. The statement is added to the result 
  sets, if patterns like (ANY, ANY, ANY), (URI, ANY, ANY) or (URI, additionalPropertyName, 
  ANY) are used. The d2rq:additionalProperty property is used to link from the 
  class map to the d2rq:AdditionalProperty definition.</p>
<P><strong>Properties</strong></P>
<table width="100%" border="1" cellpadding="5" cellspacing="0" bordercolor="#CCCCCC">
  <tr> 
    <td width="20%" valign="top"><strong>d2rq:propertyName </strong></td>
    <td width="80%" valign="top">The RDF property to be used as the predicate
      of all fixed statements.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:propertyValue</strong></td>
    <td valign="top">The value to be used as the object of all fixed statements.</td>
  </tr>
</table>
<p>The subjects of the statements are the instances generated from the class map.</p>

<P><strong>Example:</strong></P>
<DIV class="trigOuter trigInner">
  <pre>db1:PersonsClassMap rdf:type d2rq:ClassMap;
        d2rq:class :Person;
        d2rq:additionalProperty db1:SeeAlsoStatement.

db1:SeeAlsoStatement rdf:type d2rq:AdditionalProperty;
        d2rq:propertyName rdfs:seeAlso;
        d2rq:propertyValue &lt;http://annotation.semanticweb.org/iswc2003/>.</pre>
</DIV>
<p>This adds an rdfs:seeAlso statement with a fixed URL object to every instance of the class map.</p>
<p>&nbsp;</p>

<h2><a name="translationtable"></a>3.5 Translation Tables</h2>
<p>A <strong>d2rq:TranslationTable</strong> is an additional layer between
  the database and the RDF world. It translates back and forth between
  values taken from the database and RDF URIs or literals. A translation
  table can be attached to a class map or a property bridge using the
  d2rq:translateWith property.</p>
<p>TranslationTables can be used only for mappings that are unique
  in both directions (1:1).</p>

<p><strong>Example: Translating color codes</strong></p>
<p>A typical application are database columns containing type codes and
  similar enumerated values. A translation table can be used to turn them into
  RDF resources. In this example, the column ShinyObject.Color contains
  a color code: "R" for red, "G" for green etc. These codes must be
  translated into RDF resources: :red, :green etc.</p>
<div class="trigOuter trigInner">
  <pre>:red rdf:type :Color;
:green rdf:type :Color;
# ... more colors omitted ...
:blue rdf:type :Color;

db1:ColorBridge rdf:type d2rq:ObjectPropertyBridge;
        d2rq:belongsToClassMap db1:ShinyObjectMap;
        d2rq:property :color;
        d2rq:column "ShinyObject.Color";
        d2rq:translateWith db1:ColorTable.

db1:ColorTable rdf:type d2rq:TranslationTable;
        d2rq:translation [ d2rq:dbValue "R"; d2rq:rdfValue :red; ];
        d2rq:translation [ d2rq:dbValue "G"; d2rq:rdfValue :green; ];
        # ... more translations omitted ...
        d2rq:translation [ d2rq:dbValue "B"; d2rq:rdfValue :blue; ].</pre>
</div>
<p>The d2rq:translateWith statement tells D2RQ to look up database
  values in the db1:ColorTable. There, a translation is given for
  each possible value. If the database contains
  values not in the translation table, D2RQ will not generate a :color statement
  for that :ShinyObject instance.</p>
<p>Note that the type of node created by the translation is determined
  by the type of the bridge, not by the node type of the rdfValues.
  db1:ColorBridge is a d2rq:ObjectPropertyBridge. Thus, the translation will create
  resources. Had it been a d2rq:DatatypePropertyBridge, literals would be created.</p>

<P><strong>Properties</strong></P>
<table width="100%" border="1" cellpadding="5" cellspacing="0" bordercolor="#CCCCCC">
  <tr> 
    <td width="20%" valign="top"><strong>d2rq:translation</strong></td>
    <td width="80%" valign="top">Adds a <a href="#translation">d2rq:Translation</a>
      to the table.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:href</strong></td>
    <td valign="top">Links to a CSV file containing translations. Each line of
      the file is a translation and contains two strings separated by a comma.
      The first one is the DB value, the second the RDF value.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:javaClass</strong></td>
    <td valign="top">The qualified name of a Java class that performs the
      mapping. The class must implement the
      <a href="http://www.wiwiss.fu-berlin.de/suhl/bizer/d2rq/javadoc/de/fuberlin/wiwiss/d2rq/Translator.html">Translator</a>
      interface. Custom Translators might be useful for encoding and decoding
      values, but are limited to 1:1 translations. Further information can be
      found in the Javadocs.</td>
  </tr>
</table>
<p>&nbsp;</p>

<h3><a name="translation"></a>3.5.1 Translation</h3>
<p>A <strong>d2rq:Translation</strong> is a single entry in a
  d2rq:TranslationTable.
  
<p><strong>Properties</strong></p>
<table width="100%" border="1" cellpadding="5" cellspacing="0" bordercolor="#CCCCCC">
  <tr> 
    <td width="20%" valign="top"><strong>d2rq:dbValue</strong></td>
    <td width="80%" valign="top">A value that might appear in a database column
      or might be generated by a d2rq:pattern.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:rdfValue</strong></td>
    <td valign="top">A translation of that value to be used in RDF constructs.</td>
  </tr>
</table>
<p>&nbsp;</p>
<h2><a name="conditional" id="conditional"></a>3.6 Conditional Mappings</h2>
<p>Sometimes you have to filter your data before publishing it to RDF. Parts
  might be confidential, or might not match the semantics of the RDF vocabulary
  that you use. These cases are easy to deal with if those parts are
  in their own tables and columns. Just don't write class maps and property bridges
  for them. But what if some <em>rows</em> are to be published, and some not?</p>

<p>That's where <strong>d2rq:condition</strong> is useful. You can use this property
  on class maps and property bridges. The value of the property is an SQL WHERE
  clause. If the condition evaluates to FALSE for a database row, then no triples
  will be generated from that row.</p>

<p><strong>Example: Using d2rq:condition on a d2rq:ClassMap</strong></p>
<div class="trigOuter trigInner">
  <pre>db1:InProceedings rdf:type d2rq:ClassMap;
            d2rq:class :InProceedings;
            d2rq:uriPattern "http://www.conference.org/conf02004/paper#Paper@@Papers.PaperID@@";
            d2rq:condition "Papers.Publish = 1";
            d2rq:dataStorage db1:Database1.</pre>
</div>
<p>Only those papers with a value of 1 in the Papers.Publish column will be
accessible in the virtual RDF graph. All other papers are ignored, as if
their rows were not present in the Papers table.

<p><strong>Example: Filtering zero-length strings</strong></p>
<p>Usually, the special value NULL is used in a database to indicate that some
  field has no value, or that the value is unknown. In some databases, however,
  a zero-length string ("") is
  used instead. D2RQ is smart enough not to generate RDF statements from
  NULL values, but it doesn't recognize zero-length strings and will generate
  statements like <tt>:Person123 :firstName "".</tt> if the person's first name
  is not known.</p>
<p>To suppress these statements, a d2rq:condition can be added to the property
  bridge:</p>
<div class="trigOuter trigInner">
  <pre>db1:PersonsClassFirstName rdf:type d2rq:DatatypePropertyBridge;
            d2rq:property :firstName;
            d2rq:column "Persons.FirstName";
            d2rq:belongsToClassMap db1:PersonsClassMap;
            d2rq:condition "Persons.FirstName <> ''".</pre>
</div>

<p><strong>Example: Relationship type codes</strong></p>
<p>Imagine a table Rel_Paper_Topic that associates rows from a Papers table
  with rows from a Topics table. The Rel_Paper_Topic table contains a
  PaperID column to reference the papers, a TopicID to reference the topics,
  and a RelationshipType column which contains 1 if the topic is a primary
  topic of the paper, and 2 if it is a secondary topic.</p>
<p>For primary topic relationships, the :primaryTopic property shall be used,
  and for others the :secondaryTopic property.</p>
<p>We can build a map for this scenario by creating two property bridges.
  One for :primaryTopic, one for :secondaryTopic. We add a d2rq:condition
  to both bridges to suppress those statements where the RelationshipType
  column doesn't have the correct value.</p>
<div class="trigOuter trigInner">
  <pre>db1:primaryTopic rdf:type d2rq:ObjectPropertyBridge;
            d2rq:belongsToClassMap db1:InProceedings;
            d2rq:property :primaryTopic;
            d2rq:refersToClassMap db1:Topic;
            d2rq:join "Papers.PaperID = Rel_Paper_Topic.PaperID";
            d2rq:join "Rel_Paper_Topic.TopicID = Topics.TopicID";
            d2rq:condition "Rel_Paper_Topic.RelationType = 1".

db1:secondaryTopic rdf:type d2rq:ObjectPropertyBridge;
            d2rq:belongsToClassMap db1:InProceedings;
            d2rq:property :secondaryTopic;
            d2rq:refersToClassMap db1:Topic;
            d2rq:join "Papers.PaperID = Rel_Paper_Topic.PaperID";
            d2rq:join "Rel_Paper_Topic.TopicID = Topics.TopicID";
            d2rq:condition "Rel_Paper_Topic.RelationType = 2".</pre>
</div>
<p>&nbsp;</p>

<h2><a name="hint" id="hint"></a>3.7 Performance Optimization using Hint Properties</h2>
<p>This section covers some properties that can be added to d2rq:PropertyBridge instances
  to speed up queries: d2rq:valueMaxLength, d2rq:valueRegex and d2rq:valueContains.</p>

<p><strong>Example: Providing a maximum length</strong></p>
<div class="trigOuter trigInner">
  <pre>db1:PersonsClassFirstName rdf:type d2rq:DatatypePropertyBridge;
            d2rq:property :firstName;
            d2rq:column "Persons.FirstName";
            d2rq:belongsToClassMap db1:PersonsClassMap;
            d2rq:valueMaxLength "15".</pre>
</div>
<p>Let us assume that the database field Persons.FirstName was limited to 15 characters
  by the database schema designer. The d2rq:valueMaxLength property can be used to tell
  D2RQ about that restriction. The statement asserts that no value in that column is
  longer than 15 characters.

<p><strong>Example: Providing a regular expression</strong></p>
<div class="trigOuter trigInner">
  <pre>db1:inProceedingsYear rdf:type d2rq:DatatypePropertyBridge;
            d2rq:property :year;
            d2rq:column "Papers.Year";
            d2rq:belongsToClassMap db1:InProceedings;
            d2rq:datatype xsd:gYear;
            d2rq:valueRegex "^[0-9]{4}$".</pre>
</div>
<p>Here, the d2rq:valueRegex property is used to provide a
  <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/regex/Pattern.html">regular
  expression</a> for the Papers.Year column. The statement asserts that all values
  match the regular expression (or are NULL). The expression <tt>^[0-9]{4}$</tt> matches
  every four-digit number.</p>

<p>If you don't want to use the full regular expression machinery, you can use
  d2rq:valueContains to assert that all values generated by the property bridge contain
  a certain phrase.</p>

<p>If you provide these hints, you help D2RQ to execute queries faster. In the example
  above, if a query searches for a literal that is 20 characters long, D2RQ knows that
  it doesn't have to look in the Persons.FirstName column because all of its values are
  shorter than 20 characters.</p>

<p>You can get the largest gain by providing hints for property bridges based
  on d2rq:column whose values are shorter than the average string in your database,
  or whose values are all matched by a fairly specific regular expression. You should
  focus your efforts on columns in the largest tables, and on columns that have no
  database index structure. These are the cases where a well-placed optimization hint
  can result in an order-of-magnitude improvement for some queries. Don't bother to provide
  hints for property bridges based on d2rq:pattern. These can be optimized very well
  without hints.</p>

<p>Please keep in mind that these properties are not intended for filtering
  of unwanted database values. They are only performance hints. Values that do not
  fulfill the criteria
  could still appear in query results under certain circumstances. To filter values,
  use d2rq:condition or a <a href="#translationtable">translation table</a> with a
  custom Java class that returns <tt>null</tt> for unwanted database values.</p>
<p>&nbsp;</p>

<HR title="Separator for header">

<H1><A id=ntrip_grammar name=usingD2RQ>4.</A> Using D2RQ within Jena</H1>
<P>This section describes how D2RQ is used within the Jena 2 Semantic Web framework. 
</P>
<P><strong>Download</strong></P>
<P>Jena 2 can be downloaded from <a href="http://jena.sourceforge.net/downloads.html" target="_blank">http://jena.sourceforge.net/downloads.html</a><br>
  D2RQ can be downloaded from <a href="http://sourceforge.net/projects/d2rq-map/" target="_blank">http://sourceforge.net/projects/d2rq-map/</a></P>
<P><strong>Installation</strong></P>
<P> You have to add the &quot;d2rq.jar&quot; file from the &quot;bin&quot; directory 
  of the D2RQ distribution together with the Jena2 jar files to your classpath.</P>
<P>If you want to see how D2RQ translates Jena graph API calls into SQL statements, 
  you can switch into debug mode by calling
  <a href="http://www.wiwiss.fu-berlin.de/suhl/bizer/d2rq/javadoc/de/fuberlin/wiwiss/d2rq/ModelD2RQ.html#enableDebug()"><tt>enableDebug</tt></a>
  on the D2RQ model or graph object.</P>
<P>&nbsp;</P>
<h2><a name="usingmodel" id="usingmodel"></a>4.1 Using D2RQ with the Jena model 
  API</h2>
<P>The following example shows how the Jena model API is used to check if the 
  paper with the URI &quot;http://www.conference.org/conf02004/paper#Paper1&quot; 
  has an iswc:author property.</P>
<DIV class="trigOuter trigInner"> 
  <pre>import com.hp.hpl.jena.rdf.model.* ;
import de.fuberlin.wiwiss.d2rq.*;

...

String D2RQMap = &quot;file:///C:/D2RQ/maps/ISWC-d2rq.n3&quot;;<br>ModelD2RQ d2rqModel = null;<br>
// Create D2RQ Model
try {<br>    d2rqModel = new ModelD2RQ(D2RQMap);<br>} catch  (D2RQException ex) {<br>    System.out.println(ex.toString());<br>}

// Get the ressource Paper 1
String paperURI = &quot;http://www.conference.org/conf02004/paper#Paper1&quot;;<br>Resource paperRessource = d2rqModel.getResource(paperURI);<br>
// Check if Paper 1 has an auhor property
Property author = d2rqModel.createProperty(&quot;http://annotation.semanticweb.org/iswc/iswc.daml#author&quot;);<br>if (paperRessource.hasProperty(author)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;The paper has an author.&quot;);
</pre>
</DIV>
</P>
<P>&nbsp;</P>
<h2><a name="usingfind" id="usingfind"></a>4.2 Using find(spo) and D2RQ </h2>
<P>The following example shows how the Jena graph API is used to get all papers 
  which have been published in 2003.</P>
<DIV class="trigOuter trigInner"> 
  <pre>import com.hp.hpl.jena.graph.* ;
import com.hp.hpl.jena.util.iterator.ExtendedIterator;<br>import com.hp.hpl.jena.datatypes.*;
import de.fuberlin.wiwiss.d2rq.*;

...

String D2RQMap = &quot;file:///C:/D2RQ/maps/ISWC-d2rq.n3&quot;;<br>GraphD2RQ d2rqGraph = null;<br>
// Create D2RQ Graph
try {<br>    d2rqGraph = new GraphD2RQ(D2RQMap);<br>} catch  (D2RQException ex) {<br>    System.out.println(ex.toString());<br>}

// Create a find(spo) pattern 
Node subject = Node.ANY;<br>Node predicate = Node.createURI(&quot;http://annotation.semanticweb.org/iswc/iswc.daml#year&quot;);<br>RDFDatatype dtYear = TypeMapper.getInstance().getSafeTypeByName(&quot;http://www.w3.org/2001/XMLSchema#gYear&quot;);<br>Node object = Node.createLiteral(&quot;2003&quot;, null, dtYear);<br>Triple pattern = new Triple(subject, predicate, object);
<br>
// Query the graph
ExtendedIterator resultiterator = d2rqGraph.find(pattern);<br>
// Output the query results
while (resultiterator.hasNext()) {<br>    System.out.println(&quot;Result Triple :&quot; + ((Triple) resultiterator.next()).toString());<br>}
</pre>
</DIV>
</P>
<P>&nbsp;</P>
<h2><a name="usingrdql" id="usingrdql"></a>4.3 Using RDQL and D2RQ</h2>
<P>The following example shows how RDQL is used to get all information about the 
  paper with the URI &quot;http://www.conference.org/conf02004/paper#Paper1&quot;. 
  The results are displayed using a QueryResultsFormatter.</P>
<DIV class="trigOuter trigInner"> 
  <pre>import com.hp.hpl.jena.rdf.model.* ;
import com.hp.hpl.jena.rdql.*;
import java.io.PrintWriter;
import de.fuberlin.wiwiss.d2rq.*;

...

String D2RQMap = &quot;file:///C:/D2RQ/maps/ISWC-d2rq.n3&quot;;<br>ModelD2RQ d2rqModel = null;<br>
// Create D2RQ Model
try {<br>    d2rqModel = new ModelD2RQ(D2RQMap);<br>} catch  (D2RQException ex) {<br>    System.out.println(ex.toString());<br>}

// Query the model 
String rdql = &quot;SELECT ?x, ?y WHERE (&lt;http://www.conference.org/conf02004/paper#Paper1&gt;, ?x, ?y)&quot;;<br>Query query = new Query(rdql);<br>query.setSource(d2rqModel);<br>QueryExecution qe = new QueryEngine(query) ;<br>QueryResults results = qe.exec() ;<br>
// Output the query results using a QueryResultsFormatter
QueryResultsFormatter fmt = new QueryResultsFormatter(results) ;<br>PrintWriter pw = new PrintWriter(System.out) ;<br>fmt.printAll(pw, &quot; | &quot;) ;<br>pw.flush() ;<br>fmt.close() ;	<br>results.close() ;</pre>
</DIV>
</P>
<P>&nbsp;</P>
<P>&nbsp;</P>
<HR>
<H1><A id=references name=references>5. References</A></H1>

<DL>
  <DT><A id=jena name=jena>[Jena]</A> 
  <DD>Jena: Implementing the Semantic Web Recommendations, Jeremy Carroll et all, 
    <a href="http://www.hpl.hp.com/techreports/2003/HPL-2003-146.html" target="_blank">http://www.hpl.hp.com/techreports/2003/HPL-2003-146.html</a> 
  <DT><A id=TriG name=TriG>[JenaDB]</A> 
  <DD> Efficient RDF Storage and Retrieval in Jena2 , Kevin Wilkinson et all, 
    <a href="http://www.hpl.hp.com/techreports/2003/HPL-2003-266.html" target="_blank">http://www.hpl.hp.com/techreports/2003/HPL-2003-266.html 
    </a> 
  <DT><A id=rdql name=rdql>[RDQL]</A> 
  <DD> RDQL - A Query Language for RDF, Andy Seaborne, W3C Member Submission, 
    <a href="http://www.w3.org/Submission/2004/SUBM-RDQL-20040109/" target="_blank">http://www.w3.org/Submission/2004/SUBM-RDQL-20040109/</a> 
  <DT> 
  <DT><A id=joseki name=joseki>[Joseki]</A> 
  <DD> Joseki - the Jena RDF Server, Andy Seaborne,<a href="http://www.joseki.org/" target="_blank">http://www.joseki.org/</a> 
  <DT> 
  <DT> 
  <DT><A id=TriG name=TriG>[D2R]</A> 
  <DD> D2R MAP - A Database to RDF Mapping Language, Christian Bizer, <a href="http://www.wiwiss.fu-berlin.de/suhl/bizer/pub/www2003-D2R-Map.pdf" target="_blank">http://www.wiwiss.fu-berlin.de/suhl/bizer/pub/www2003-D2R-Map.pdf</a> 
  <DT><A id=TriG name=TriG>[RDF2SQL]</A> 
  <DD> RDF to SQL Mapping, Eric Prud'hommeaux, <a href="http://www.w3.org/2003/01/21-RDF-RDB-access/" target="_blank">http://www.w3.org/2003/01/21-RDF-RDB-access/</a> 
  <DT>&nbsp; 
  <DT><A id=ref-rdf-syntax name=ref-rdf-syntax></A>[RDF-SYNTAX] 
  <DD><CITE>RDF/XML Syntax Specification (Revised)</CITE>, Beckett D. (Editor), 
    W3C Recommendation, <a href="http://www.w3.org/TR/rdf-syntax-grammar/" target="_blank">http://www.w3.org/TR/rdf-syntax-grammar/</a></DD>
  <DT> 
</DL>
<DL>
  <DT> 
</DL>
<P></P>
<HR>
<H1><A id=change_log 
name=change_log>6. Change Log</A></H1>

<ul>
  <li>2004-06-15: Initial version of this document.</li>
  <li>2004-08-03: Updated reflecting changes in D2RQ v0.2.</li>
</ul>
<P>&nbsp;</P>
<HR>

</BODY>
</HTML>
